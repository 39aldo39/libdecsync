buildscript {
    ext.kotlin_version = '1.4.32'

    repositories {
        jcenter()
        google()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:4.1.3'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-serialization:$kotlin_version"
    }
}
apply plugin: 'com.android.library'
apply plugin: 'kotlin-multiplatform'
apply plugin: 'kotlinx-serialization'
apply plugin: 'maven-publish'
apply plugin: 'signing'

group = "org.decsync"
version = "1.9.0"

repositories {
    mavenCentral()
    google()
}

android {
    compileSdkVersion 29

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 29
        versionCode 22
        versionName version
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    packagingOptions {
        exclude 'META-INF/kotlinx-serialization-runtime.kotlin_module'
    }
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.preference:preference:1.1.1'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.4.1'
    implementation 'androidx.work:work-runtime-ktx:2.4.0'

    androidTestImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
    androidTestImplementation "com.android.support.test:runner:1.0.2"
    androidTestImplementation "androidx.test.ext:junit:1.1.2"
    androidTestImplementation "androidx.test:rules:1.3.0"
}

kotlin {
    android {
        publishLibraryVariantsGroupedByFlavor = true
        publishAllLibraryVariants()
    }
    linuxX64 {
        binaries {
            sharedLib {
                baseName = "decsync"
            }
        }
    }
    mingwX64 {
        binaries {
            sharedLib {
                baseName = "decsync"
            }
        }
    }

    sourceSets {
        commonMain {
            dependencies {
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:1.0.0"
            }
        }
        commonTest {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-test-common"
                implementation "org.jetbrains.kotlin:kotlin-test-annotations-common"
            }
        }
        nativeMain {
            dependsOn commonMain
        }
        nativeTest {
            dependsOn commonTest
        }
        linuxX64Main {
            dependsOn nativeMain
        }
        linuxX64Test {
            dependsOn nativeTest
        }
        mingwX64Main {
            dependsOn nativeMain
        }
        mingwX64Test {
            dependsOn nativeTest
        }
    }
}

publishing {
    repositories {
        maven {
            url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            credentials {
                username = project.hasProperty("ossrhUsername") ? ossrhUsername : System.getenv("OSSRH_USERNAME")
                password = project.hasProperty("ossrhPassword") ? ossrhPassword : System.getenv("OSSRH_PASSWORD")
            }
        }
    }

    publications.withType(MavenPublication) {
        pom {
            name = "libdecsync"
            description = "Multiplatform library for synchronizing using DecSync"
            url = "https://github.com/39aldo39/libdecsync"
            licenses {
                license {
                    name = "LGPL-2.0+"
                    url = "https://opensource.org/licenses/LGPL-2.0"
                }
            }
            scm {
                url = "https://github.com/39aldo39/libdecsync"
            }
            developers {
                developer {
                    id = "39aldo39"
                    name = "Aldo Gunsing"
                    email = "dev@aldogunsing.nl"
                }
            }
        }
    }
}

if (!project.hasProperty("signing.keyId") && !project.hasProperty("signing.password") && !project.hasProperty("signing.secretKeyRingFile")) {
    ext["signing.keyId"] = System.getenv("SIGNING_KEY_ID")
    ext["signing.password"] = System.getenv("SIGNING_PASSWORD")
    ext["signing.secretKeyRingFile"] = System.getenv("SIGNING_SECRET_KEY_RING_FILE")
}

signing {
    sign publishing.publications
}